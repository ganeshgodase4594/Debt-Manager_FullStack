import 'dart:typed_data';
import 'package:pdf/widgets.dart' as pw;
import 'package:pdf/pdf.dart';
import 'package:debt_manager_frontend/models/expense.dart';
import 'package:debt_manager_frontend/models/user.dart';
import 'package:intl/intl.dart';

Future<Uint8List> buildExpenseReportPdf({
  required User currentUser,
  required User customer,
  required List<Expense> created,
  required List<Expense> owed,
  required String summary,
}) async {
  final pdf = pw.Document();

  pdf.addPage(
    pw.MultiPage(
      pageFormat: PdfPageFormat.a4,
      build:
          (context) => [
            // Header
            pw.Header(
              level: 0,
              child: pw.Text(
                'Expense Report',
                style: pw.TextStyle(
                  fontSize: 24,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.blue,
                ),
              ),
            ),

            pw.SizedBox(height: 20),

            // Report Info
            pw.Container(
              padding: pw.EdgeInsets.all(10),
              decoration: pw.BoxDecoration(
                color: PdfColors.grey100,
                borderRadius: pw.BorderRadius.circular(5),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'Generated on: ${DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now())}',
                    style: pw.TextStyle(fontSize: 12, color: PdfColors.grey700),
                  ),
                  pw.SizedBox(height: 5),
                  pw.Text(
                    'Between: ${currentUser.fullName} (@${currentUser.username})',
                    style: pw.TextStyle(
                      fontSize: 14,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.Text(
                    'and: ${customer.fullName} (@${customer.username})',
                    style: pw.TextStyle(
                      fontSize: 14,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),

            pw.SizedBox(height: 20),

            // Summary
            pw.Container(
              padding: pw.EdgeInsets.all(15),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                borderRadius: pw.BorderRadius.circular(8),
                border: pw.Border.all(color: PdfColors.blue, width: 2),
              ),
              child: pw.Text(
                'Summary: $summary',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.blue900,
                ),
              ),
            ),

            pw.SizedBox(height: 30),

            // Created Expenses Section
            pw.Text(
              'Expenses You Created (They Owe You):',
              style: pw.TextStyle(
                fontSize: 16,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.green700,
              ),
            ),
            pw.SizedBox(height: 10),
            _buildExpenseTable(
              created,
              'Rs. ${_calculatePendingTotal(created).toStringAsFixed(2)}',
              'Pending Total',
            ),

            pw.SizedBox(height: 30),

            // Owed Expenses Section
            pw.Text(
              'Expenses You Owe (You Owe Them):',
              style: pw.TextStyle(
                fontSize: 16,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.red700,
              ),
            ),
            pw.SizedBox(height: 10),
            _buildExpenseTable(
              owed,
              'Rs. ${_calculatePendingTotal(owed).toStringAsFixed(2)}',
              'Pending Total',
            ),

            pw.SizedBox(height: 30),

            // Footer
            pw.Text(
              'Generated by Debt Manager App',
              style: pw.TextStyle(fontSize: 10, color: PdfColors.grey600),
              textAlign: pw.TextAlign.center,
            ),
          ],
    ),
  );

  return pdf.save();
}

pw.Widget _buildExpenseTable(
  List<Expense> expenses,
  String totalAmount,
  String totalLabel,
) {
  if (expenses.isEmpty) {
    return pw.Container(
      padding: pw.EdgeInsets.all(20),
      child: pw.Text(
        'No expenses found',
        style: pw.TextStyle(
          fontSize: 12,
          color: PdfColors.grey600,
          fontStyle: pw.FontStyle.italic,
        ),
        textAlign: pw.TextAlign.center,
      ),
    );
  }

  return pw.Column(
    children: [
      pw.Table.fromTextArray(
        headers: [
          'Description',
          'Amount (Rs.)',
          'Status',
          'Created Date',
          'Due Date',
          'Notes',
        ],
        data:
            expenses
                .map(
                  (e) => [
                    e.description,
                    e.amount.toStringAsFixed(2),
                    e.status.toString().split('.').last,
                    DateFormat('dd/MM/yyyy').format(e.createdAt),
                    e.dueDate != null
                        ? DateFormat('dd/MM/yyyy').format(e.dueDate!)
                        : 'N/A',
                    e.notes ?? '',
                  ],
                )
                .toList(),
        cellStyle: pw.TextStyle(fontSize: 9),
        headerStyle: pw.TextStyle(
          fontWeight: pw.FontWeight.bold,
          color: PdfColors.white,
          fontSize: 10,
        ),
        headerDecoration: pw.BoxDecoration(color: PdfColors.grey700),
        cellAlignment: pw.Alignment.centerLeft,
        border: pw.TableBorder.all(color: PdfColors.grey400),
      ),
      pw.SizedBox(height: 10),
      pw.Container(
        padding: pw.EdgeInsets.all(8),
        decoration: pw.BoxDecoration(
          color: PdfColors.grey200,
          borderRadius: pw.BorderRadius.circular(4),
        ),
        child: pw.Text(
          '$totalLabel: $totalAmount',
          style: pw.TextStyle(fontSize: 12, fontWeight: pw.FontWeight.bold),
        ),
      ),
    ],
  );
}

double _calculatePendingTotal(List<Expense> expenses) {
  return expenses
      .where((expense) => expense.status == ExpenseStatus.PENDING)
      .fold(0.0, (sum, expense) => sum + expense.amount);
}
